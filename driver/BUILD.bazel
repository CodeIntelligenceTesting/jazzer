load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
load("//bazel:cc.bzl", "cc_17_library")

cc_library(
    name = "sanitizer_hooks_with_pc",
    srcs = ["sanitizer_hooks_with_pc.cpp"],
    hdrs = ["sanitizer_hooks_with_pc.h"],
)

cc_test(
    name = "sanitizer_hooks_with_pc_test",
    size = "small",
    srcs = ["sanitizer_hooks_with_pc_test.cpp"],
    deps = [
        ":sanitizer_hooks_with_pc",
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
)

cc_library(
    name = "jvm_tooling_lib",
    srcs = [
        "coverage_tracker.cpp",
        "fuzz_target_runner.cpp",
        "fuzzed_data_provider.cpp",
        "java_reproducer_templates.h",
        "jvm_tooling.cpp",
        "libfuzzer_callbacks.cpp",
        "libfuzzer_callbacks.h",
        "libfuzzer_driver.cpp",
        "signal_handler.cpp",
        "signal_handler.h",
        "utils.cpp",
        "utils.h",
    ],
    hdrs = [
        "coverage_tracker.h",
        "fuzz_target_runner.h",
        "fuzzed_data_provider.h",
        "jvm_tooling.h",
        "libfuzzer_driver.h",
    ],
    linkopts = [
        "-ldl",
    ],
    # Needs to be linked statically for JNI_OnLoad_jazzer_initialize to be found
    # by the JVM.
    linkstatic = True,
    visibility = ["//visibility:public"],
    deps = [
        ":sanitizer_hooks_with_pc",
        "@bazel_tools//tools/cpp/runfiles",
        "@bazel_tools//tools/jdk:jni",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_glog//:glog",
        "@jazzer_com_github_gflags_gflags//:gflags",
        "@jazzer_libjvm//:libjvm",
    ],
)

cc_17_library(
    name = "driver_lib",
    srcs = [
        "libfuzzer_fuzz_target.cpp",
    ],
    deps = [
        ":jvm_tooling_lib",
        "@jazzer_libfuzzer//:libFuzzer",
    ],
    alwayslink = True,
)

cc_binary(
    name = "jazzer_driver",
    data = [
        "//agent:jazzer_agent_deploy.jar",
    ],
    linkopts = [
        "-rdynamic",
    ],
    visibility = ["//visibility:public"],
    deps = [":driver_lib"],
)

alias(
    name = "using_toolchain_on_osx",
    actual = select({
        "//third_party:uses_toolchain": "@platforms//os:osx",
        # In order to achieve AND semantics, reference a setting that is known
        # not to apply.
        "//conditions:default": "//third_party:uses_toolchain",
    }),
)

cc_binary(
    name = "jazzer_driver_asan",
    data = [
        "//agent:jazzer_agent_deploy.jar",
    ],
    linkopts = [
        "-fsanitize=address",
        "-static-libsan",
        "-rdynamic",
    ],
    visibility = ["//visibility:public"],
    deps = [":driver_lib"] + select({
        # There is no static ASan runtime on macOS, so link to the dynamic
        # runtime library if on macOS and using the toolchain.
        ":using_toolchain_on_osx": ["@llvm_toolchain//:macos_asan_dynamic"],
        "//conditions:default": [],
    }),
)

cc_binary(
    name = "jazzer_driver_ubsan",
    data = [
        "//agent:jazzer_agent_deploy.jar",
    ],
    linkopts = [
        "-fsanitize=undefined",
        # Link UBSan statically, even on macOS.
        "-static-libsan",
        "-rdynamic",
    ],
    visibility = ["//visibility:public"],
    deps = [":driver_lib"],
)

cc_test(
    name = "jvm_tooling_test",
    size = "small",
    srcs = [
        "jvm_tooling_test.cpp",
        "sanitizer_symbols_for_tests.cpp",
    ],
    args = [
        "--cp=$(location //driver/testdata:fuzz_target_mocks_deploy.jar)",
        "--agent_path=$(rootpath //agent:jazzer_agent_deploy.jar)",
    ],
    data = [
        "//agent:jazzer_agent_deploy.jar",
        "//driver/testdata:fuzz_target_mocks_deploy.jar",
    ],
    includes = ["."],
    linkopts = [
        # Needs to export symbols dynamically for JNI_OnLoad_jazzer_initialize
        # to be found by the JVM.
        "-rdynamic",
    ],
    deps = [
        ":jvm_tooling_lib",
        ":test_main",
        "@googletest//:gtest",
        "@jazzer_com_github_gflags_gflags//:gflags",
    ],
)

cc_test(
    name = "fuzzed_data_provider_test",
    size = "medium",
    srcs = [
        "fuzzed_data_provider_test.cpp",
        "sanitizer_symbols_for_tests.cpp",
    ],
    args = [
        "--cp=$(location //driver/testdata:fuzz_target_mocks_deploy.jar)",
        "--agent_path=$(rootpath //agent:jazzer_agent_deploy.jar)",
    ],
    data = [
        "//agent:jazzer_agent_deploy.jar",
        "//driver/testdata:fuzz_target_mocks_deploy.jar",
    ],
    includes = ["."],
    deps = [
        ":jvm_tooling_lib",
        ":test_main",
        "@googletest//:gtest",
        "@jazzer_com_github_gflags_gflags//:gflags",
    ],
)

cc_library(
    name = "test_main",
    srcs = ["test_main.cpp"],
    deps = [
        "@googletest//:gtest",
        "@jazzer_com_github_gflags_gflags//:gflags",
    ],
)
