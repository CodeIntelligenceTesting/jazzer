name: Release

on:
  workflow_dispatch:

jobs:
  # RELEASE_MATRIX isn't really secret, but this appears to be the only way to pass per-repo configuration into a
  # workflow. GitHub does not allow secrets to be returned as outputs, so we store the secret encoded as Base64.
  # Its current value can be generated with:
  #
  # echo '{"include":[{"os":"ubuntu-20.04","name":"linux"},{"os":"macos-11","name":"macos-x86_64"},{"os":"windows-2019",name:"windows"}]}' | base64 -w 0
  #
  # Based on https://docs.github.com/en/actions/learn-github-actions/expressions#example-returning-a-json-object
  configure_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: echo "matrix=$(echo '${{ secrets.RELEASE_MATRIX }}' | base64 -d)" >> $GITHUB_OUTPUT

  build_release:
    needs: configure_matrix

    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.configure_matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 8

      - name: Set up MSYS2 to work around bazelbuild/bazel#15919
        if: contains(matrix.os, 'windows')
        shell: cmd
        run: |
          where bash.exe
          md C:\tools\msys64\usr\bin
          mklink C:\tools\msys64\usr\bin\bash.exe "C:\Program Files\Git\usr\bin\bash.exe"

      - name: Set Build Buddy config
        shell: bash
        run: .github/scripts/echoBuildBuddyConfig.sh ${{ secrets.BUILDBUDDY_API_KEY }} >> $GITHUB_ENV

      - name: Append build settings to .bazelrc
        shell: bash
        run: |
          echo "build --announce_rc" >> .bazelrc
          echo "build --config=maven" >> .bazelrc
          echo "build:linux --config=toolchain" >> .bazelrc
          echo "build:linux --extra_toolchains=@llvm_toolchain//:cc-toolchain-x86_64-linux" >> .bazelrc
          echo "build:macos --features=-layering_check" >> .bazelrc

      - name: Build
        shell: bash
        # Double forward slashes are converted to single ones by Git Bash on Windows, so we use working directory
        # relative labels instead.
        run: |
          bazelisk build ${{env.BUILD_BUDDY_CONFIG}} deploy:jazzer :jazzer_release
          cp -L $(bazel cquery --output=files deploy:jazzer) jazzer-${{ matrix.name }}.jar
          cp -L $(bazel cquery --output=files :jazzer_release) jazzer-${{ matrix.name }}.tar.gz

      - name: Upload jazzer.jar
        uses: actions/upload-artifact@v3
        with:
          name: jazzer_tmp
          path: jazzer-${{ matrix.name }}.jar
          if-no-files-found: error

      - name: Upload release archive
        uses: actions/upload-artifact@v3
        with:
          name: jazzer_releases
          path: jazzer-${{ matrix.name }}.tar.gz
          if-no-files-found: error

  merge_jars:
    runs-on: ubuntu-latest
    needs: build_release

    steps:
      - uses: actions/checkout@v3

      - name: Download individual jars
        uses: actions/download-artifact@v3
        with:
          name: jazzer_tmp
          path: _tmp/

      - name: Merge jars
        run: |
          bazel run @rules_jvm_external//private/tools/java/rules/jvm/external/jar:MergeJars -- \
            --output "$(pwd)"/_tmp/jazzer.jar \
            $(find "$(pwd)/_tmp/" -name '*.jar' -printf "--sources %h/%f ")

      - name: Upload merged jar
        uses: actions/upload-artifact@v3
        with:
          name: jazzer
          path: _tmp/jazzer.jar
          if-no-files-found: error
