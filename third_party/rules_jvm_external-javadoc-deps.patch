From 119d0bf53b1a76436095986ffe11a0c97f1757db Mon Sep 17 00:00:00 2001
From: Fabian Meumertzheim <meumertzheim@code-intelligence.com>
Date: Mon, 11 Sep 2023 13:05:32 +0200
Subject: [PATCH] javadoc: Allow `javadoc` targets to reference other `javadoc`
 targets

By setting the `doc_url` attribute on a `javadoc` target, other targets
can depend on it via `doc_deps` and have references resolved
automatically via appropriate `-linkoffline` arguments passed to
javadoc.
---
 private/rules/java_export.bzl                 | 21 ++++-
 private/rules/javadoc.bzl                     | 77 +++++++++++++++++--
 .../javadoc/JavadocJarMaker.java              | 15 ++++
 3 files changed, 106 insertions(+), 7 deletions(-)

diff --git a/private/rules/java_export.bzl b/private/rules/java_export.bzl
index 5c576f95..81138db1 100644
--- a/private/rules/java_export.bzl
+++ b/private/rules/java_export.bzl
@@ -69,6 +69,10 @@ def java_export(
         that workspace should be replaced by, or `None` if the exclusion shouldn't be replaced
         with an extra dependency.
       classifier_artifacts: A dict of classifier -> artifact of additional artifacts to publish to Maven.
+      doc_deps: Other `javadoc` targets that are referenced by the generated `javadoc` target
+        (if not using `tags = ["no-javadoc"]`)
+      doc_url: The URL at which the generated `javadoc` will be hosted (if not using
+        `tags = ["no-javadoc"]`).
       visibility: The visibility of the target
       kwargs: These are passed to [`java_library`](https://bazel.build/reference/be/java#java_library),
         and so may contain any valid parameter for that rule.
@@ -78,6 +82,8 @@ def java_export(
     lib_name = "%s-lib" % name
 
     javadocopts = kwargs.pop("javadocopts", [])
+    doc_deps = kwargs.pop("doc_deps", [])
+    doc_url = kwargs.pop("doc_url", "")
 
     # Construct the java_library we'll export from here.
     native.java_library(
@@ -100,6 +106,8 @@ def java_export(
         testonly,
         javadocopts,
         classifier_artifacts = classifier_artifacts,
+        doc_deps = doc_deps,
+        doc_url = doc_url,
     )
 
 def maven_export(
@@ -113,7 +121,10 @@ def maven_export(
         tags = [],
         testonly = False,
         javadocopts = [],
-        classifier_artifacts = {}):
+        classifier_artifacts = {},
+        *,
+        doc_deps = [],
+        doc_url = ""):
     """
     All arguments are the same as java_export with the addition of:
       lib_name: Name of the library that has been built.
@@ -166,6 +177,10 @@ def maven_export(
         that should not be included in the maven jar to a `Label` pointing to the dependency
         that workspace should be replaced by, or `None` if the exclusion shouldn't be replaced
         with an extra dependency.
+      doc_deps: Other `javadoc` targets that are referenced by the generated `javadoc` target
+        (if not using `tags = ["no-javadoc"]`)
+      doc_url: The URL at which the generated `javadoc` will be hosted (if not using
+        `tags = ["no-javadoc"]`).
       visibility: The visibility of the target
       kwargs: These are passed to [`java_library`](https://bazel.build/reference/be/java#java_library),
         and so may contain any valid parameter for that rule.
@@ -176,6 +191,8 @@ def maven_export(
     deploy_env = deploy_env if deploy_env else []
     excluded_workspaces = excluded_workspaces if excluded_workspaces else {}
     javadocopts = javadocopts if javadocopts else []
+    doc_url = doc_url if doc_url else ""
+    doc_deps = doc_deps if doc_deps else []
     tags = tags if tags else []
     classifier_artifacts = classifier_artifacts if classifier_artifacts else {}
 
@@ -227,6 +244,8 @@ def maven_export(
                 ":%s-project" % name,
             ] + deploy_env,
             javadocopts = javadocopts,
+            doc_deps = doc_deps,
+            doc_url = doc_url,
             excluded_workspaces = excluded_workspaces.keys(),
             additional_dependencies = additional_dependencies,
             visibility = visibility,
diff --git a/private/rules/javadoc.bzl b/private/rules/javadoc.bzl
index 3261248a..98ce3a08 100644
--- a/private/rules/javadoc.bzl
+++ b/private/rules/javadoc.bzl
@@ -1,16 +1,42 @@
 load(":maven_project_jar.bzl", "DEFAULT_EXCLUDED_WORKSPACES")
 
-def generate_javadoc(ctx, javadoc, source_jars, classpath, javadocopts, output):
+_JavadocInfo = provider(
+    fields = {
+        "element_list": "The element-list or package-list file generated by javadoc",
+        "url": "The URL at which this documentation will be hosted",
+    },
+)
+
+def generate_javadoc(
+        ctx,
+        javadoc,
+        source_jars,
+        classpath,
+        javadocopts,
+        doc_deps,
+        output,
+        element_list):
+    inputs = []
+    transitive_inputs = []
     args = ctx.actions.args()
-    args.add_all(["--out", output])
+    args.add("--out", output)
+    args.add("--element-list", element_list)
     args.add_all(source_jars, before_each = "--in")
+    inputs.extend(source_jars)
     args.add_all(classpath, before_each = "--cp")
+    transitive_inputs.append(classpath)
+    for dep in doc_deps:
+        dep_info = dep[_JavadocInfo]
+        args.add("-linkoffline")
+        args.add(dep_info.url)
+        args.add(dep_info.element_list.dirname)
+        inputs.append(dep_info.element_list)
     args.add_all(javadocopts)
 
     ctx.actions.run(
         executable = javadoc,
-        outputs = [output],
-        inputs = depset(source_jars, transitive = [classpath]),
+        outputs = [output, element_list],
+        inputs = depset(inputs, transitive = transitive_inputs),
         arguments = [args],
     )
 
@@ -21,6 +47,10 @@ def _javadoc_impl(ctx):
 
     jar_file = ctx.actions.declare_file("%s.jar" % ctx.attr.name)
 
+    # This needs to be a in a separate directory as javadoc accepts the containing directory as
+    # an argument rather than the file itself.
+    element_list = ctx.actions.declare_file("%s-element-list-dir/element-list" % ctx.attr.name)
+
     # javadoc may need to inspect compile-time dependencies (neverlink)
     # of the runtime classpath.
     classpath = depset(
@@ -34,11 +64,29 @@ def _javadoc_impl(ctx):
     # `None` https://github.com/bazelbuild/bazel/issues/10170). For this
     # reason we allow people to set javadocopts via the rule attrs.
 
-    generate_javadoc(ctx, ctx.executable._javadoc, sources, classpath, ctx.attr.javadocopts, jar_file)
+    generate_javadoc(
+        ctx,
+        ctx.executable._javadoc,
+        sources,
+        classpath,
+        ctx.attr.javadocopts,
+        ctx.attr.doc_deps,
+        jar_file,
+        element_list,
+    )
 
-    return [
+    providers = [
         DefaultInfo(files = depset([jar_file])),
     ]
+    if ctx.attr.doc_url:
+        providers.append(
+            _JavadocInfo(
+                element_list = element_list,
+                url = ctx.attr.doc_url,
+            ),
+        )
+
+    return providers
 
 javadoc = rule(
     _javadoc_impl,
@@ -61,6 +109,23 @@ javadoc = rule(
             options can be passed here.
             """,
         ),
+        "doc_deps": attr.label_list(
+            doc = """`javadoc` targets referenced by the current target.
+
+            Use this to automatically add appropriate `-linkoffline` javadoc options to resolve
+            references to packages documented by the given javadoc targets that have `url`
+            specified.
+            """,
+            providers = [
+                [_JavadocInfo],
+            ],
+        ),
+        "doc_url": attr.string(
+            doc = """The URL at which this documentation will be hosted.
+
+            This information is only used by javadoc targets depending on this target.
+            """,
+        ),
         "excluded_workspaces": attr.string_list(
             doc = "A list of bazel workspace names to exclude from the generated jar",
             allow_empty = True,
diff --git a/private/tools/java/com/github/bazelbuild/rules_jvm_external/javadoc/JavadocJarMaker.java b/private/tools/java/com/github/bazelbuild/rules_jvm_external/javadoc/JavadocJarMaker.java
index 6e8b57e6..550e075a 100644
--- a/private/tools/java/com/github/bazelbuild/rules_jvm_external/javadoc/JavadocJarMaker.java
+++ b/private/tools/java/com/github/bazelbuild/rules_jvm_external/javadoc/JavadocJarMaker.java
@@ -22,6 +22,7 @@
 import com.github.bazelbuild.rules_jvm_external.ByteStreams;
 import com.github.bazelbuild.rules_jvm_external.zip.StableZipEntry;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -57,6 +58,7 @@ public class JavadocJarMaker {
   public static void main(String[] args) throws IOException {
     Set<Path> sourceJars = new HashSet<>();
     Path out = null;
+    Path elementList = null;
     Set<Path> classpath = new HashSet<>();
     List<String> options = new ArrayList<>();
 
@@ -80,6 +82,11 @@ public static void main(String[] args) throws IOException {
           out = Paths.get(next);
           break;
 
+        case "--element-list":
+          next = args[++i];
+          elementList = Paths.get(next);
+          break;
+
         default:
           options.add(flag);
           break;
@@ -167,6 +174,14 @@ public static void main(String[] args) throws IOException {
         return;
       }
 
+      Path generatedElementList = outputTo.resolve("element-list");
+      try {
+        Files.copy(generatedElementList, elementList);
+      } catch (FileNotFoundException e) {
+        // Do not fail the action if the generated element-list couldn't be found.
+        Files.createFile(generatedElementList);
+      }
+
       try (OutputStream os = Files.newOutputStream(out);
           ZipOutputStream zos = new ZipOutputStream(os);
           Stream<Path> walk = Files.walk(outputTo)) {
