load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@io_bazel_rules_kotlin//kotlin:jvm.bzl", "kt_jvm_library")
load("//sanitizers:sanitizers.bzl", "SANITIZER_CLASSES")

java_library(
    name = "regex_roadblocks",
    srcs = ["RegexRoadblocks.java"],
    deps = [
        "//agent/src/main/java/com/code_intelligence/jazzer/api:hooks",
        "//agent/src/main/java/com/code_intelligence/jazzer/utils:unsafe_provider",
        "//sanitizers/src/main/java/com/code_intelligence/jazzer/sanitizers/utils:reflection_utils",
    ],
)

java_library(
    name = "sql_injection",
    srcs = ["SqlInjection.java"],
    deps = [
        "//agent/src/main/java/com/code_intelligence/jazzer/api:hooks",
        "@maven//:com_github_jsqlparser_jsqlparser",
    ],
)

kt_jvm_library(
    name = "sanitizers",
    srcs = [
        "Deserialization.kt",
        "ExpressionLanguageInjection.kt",
        "LdapInjection.kt",
        "NamingContextLookup.kt",
        "OsCommandInjection.kt",
        "ReflectiveCall.kt",
        "RegexInjection.kt",
        "Utils.kt",
    ],
    visibility = ["//sanitizers:__pkg__"],
    runtime_deps = [
        ":regex_roadblocks",
        ":sql_injection",
    ],
    deps = [
        "//agent/src/main/java/com/code_intelligence/jazzer/api:hooks",
    ],
)

java_library(
    name = "constants",
    srcs = [":constants_java"],
    visibility = ["//visibility:public"],
)

write_file(
    name = "constants_java",
    out = "Constants.java",
    content = [
        "package com.code_intelligence.jazzer.sanitizers;",
        "import java.io.File;",
        "public final class Constants {",
        "  public static final String SANITIZER_HOOK_NAMES = \"%s\";" % "\" + File.pathSeparator + \"".join(SANITIZER_CLASSES),
        "}",
    ],
)
